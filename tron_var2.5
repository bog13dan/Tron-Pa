import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
/* Head ends here */
static int [][] Moves(String player, int[] pos, String [] board){
   //logic here
    int posn;
    int posm;
    int rez[][] = new int[4][4];
    if(player.charAt(0) == 'r') { 
        posn = pos[0];
        posm = pos[1];
    } else {
        posn = pos[2];
        posm = pos[3];
    }
   
    int i = 0;
    
    if(posn -1 >= 1 && board[posn - 1].charAt(posm) != '#' && board[posn - 1].charAt(posm) != 'r' && board[posn - 1].charAt(posm) != 'g'){
        
        if(player.charAt(0) == 'r'){
        rez[i][0] = pos[0] -1;
        rez[i][1] = pos[1];
        rez[i][2] = pos[2]; 
        rez[i][3] = pos[3];
        } else {
        rez[i][0] = pos[0];
        rez[i][1] = pos[1];
        rez[i][2] = pos[2] -1; 
        rez[i][3] = pos[3];
        }
        
       i++;
    }
     if(board[posn + 1].charAt(posm) != '#' && board[posn + 1].charAt(posm) != 'r' && board[posn + 1].charAt(posm) != 'g'){
        
        if(player.charAt(0) == 'r'){
        rez[i][0] = pos[0] +1;
        rez[i][1] = pos[1];
        rez[i][2] = pos[2]; 
        rez[i][3] = pos[3];
        } else {
        rez[i][0] = pos[0];
        rez[i][1] = pos[1];
        rez[i][2] = pos[2] +1; 
        rez[i][3] = pos[3];
        }
      
        i++;
    }
     if(board[posn].charAt(posm + 1) != '#' && board[posn].charAt(posm + 1) != 'r' && board[posn].charAt(posm + 1) != 'g' ){
         
        if(player.charAt(0) == 'r'){
        rez[i][0] = pos[0];
        rez[i][1] = pos[1] + 1;
        rez[i][2] = pos[2]; 
        rez[i][3] = pos[3];
        } else {
        rez[i][0] = pos[0];
        rez[i][1] = pos[1];
        rez[i][2] = pos[2]; 
        rez[i][3] = pos[3] + 1;
        } 
      
         i++;
    }
     if(posm -1>=0 && board[posn].charAt(posm - 1) != '#' && board[posn].charAt(posm - 1) != 'r' && board[posn].charAt(posm - 1) != 'g' ){
        if(player.charAt(0) == 'r'){
        rez[i][0] = pos[0] ;
        rez[i][1] = pos[1] -1;
        rez[i][2] = pos[2]; 
        rez[i][3] = pos[3];
        } else {
        rez[i][0] = pos[0];
        rez[i][1] = pos[1];
        rez[i][2] = pos[2]; 
        rez[i][3] = pos[3]-1;
        }
     
         i++;
    }
     
    return rez;
  }
static int MovesSize(String player, int[] pos, String [] board){
   //logic here
    int posn;
    int posm;
    if(player.charAt(0) == 'r') { 
        posn = pos[0];
        posm = pos[1];
    } else {
        posn = pos[2];
        posm = pos[3];
    }
   
    int i = 0;
    
    if(posn -1 >= 0 && board[posn - 1].charAt(posm) != '#' && board[posn - 1].charAt(posm) != 'r' && board[posn - 1].charAt(posm) != 'g'){
    i++;
    }
     if(board[posn + 1].charAt(posm) != '#' && board[posn + 1].charAt(posm) != 'r' && board[posn + 1].charAt(posm) != 'g'){
    i++;
    }
     if(board[posn].charAt(posm + 1) != '#' && board[posn].charAt(posm + 1) != 'r' && board[posn].charAt(posm + 1) != 'g' ){
     i++;
    }
     if(posm -1 >= 0 && board[posn].charAt(posm - 1) != '#' && board[posn].charAt(posm - 1) != 'r' && board[posn].charAt(posm - 1) != 'g' ){
     i++;
    }

     
    return i;
  }
    static int spaceOcuppied(String []board,String player){
    int rez=0;
    for(int i=0;i<board.length;i++)
        for(int j=0;j<board[i].length();j++)
            if(board[i].charAt(j)==player.charAt(0))
                rez++;
    return rez;
}
    public static void Fill(String board[],int x,int y,char c,char o)
 {
  if(board[x].charAt(y)!=o) return;
  board[x]=board[x].substring(0,y)+ c +board[x].substring(y+1);
 
  if(x<board.length-1 &&board[x+1].charAt(y)!=c)
   Fill(board,x+1,y,c,o);
  if(x>0&&board[x-1].charAt(y)!=c)
   Fill(board,x-1,y,c,o);
  if(y<board[x].length()-1 &&board[x].charAt(y+1)!=c)
   Fill(board,x,y+1,c,o);
  if(y>0&&board[x].charAt(y-1)!=c)
   Fill(board,x,y-1,c,o);
 }
 public static int distBFS(String []board,String player,int []pos){
        int count = 0,mymoves=0,oppmoves=0;
        String opp=new String();
        String []newboard = new String[board.length];
       System.arraycopy(board, 0, newboard, 0, board.length); 
       if(player.charAt(0) == 'r'){
            newboard[pos[2]]=newboard[pos[2]].substring(0,pos[3])+ '-' +newboard[pos[2]].substring(pos[3]+1);
        }else if(player.charAt(0) == 'g'){
            newboard[pos[0]]=newboard[pos[0]].substring(0,pos[1])+ '-' +newboard[pos[0]].substring(pos[1]+1);
        }
        Queue<int []> que=new LinkedList<int []>();
        int []vis = new int[newboard.length*newboard.length];
          for (int i=0; i < newboard.length * newboard.length; i++){ vis[i]=0;}
        if(player.charAt(0) == 'r'){
            opp = "g"; 
            
            vis[pos[0]*newboard.length + pos[1]]=1;
        } else { 
            opp = "r";
            vis[pos[2]*newboard.length + pos[3]]=1;
        }
           
            int tmp[] = new int[5];
            System.arraycopy(pos, 0, tmp, 0, pos.length); 
            tmp[4] = 0;
            que.add(tmp);
            while(!que.isEmpty()){
            int temp[] = que.remove();
            int moves[][] = Moves(player,temp,newboard);
            int opp_moves[][] = Moves(opp,temp,newboard);
            mymoves = MovesSize(player,temp,newboard);
            oppmoves = MovesSize(opp,temp,newboard);
            count = temp[4];
                if(player.charAt(0) == 'r'){
                    for (int i=0; i <oppmoves; i++){
                        if(temp[0] == pos[2] && pos[3] == temp[1] ){
                         
                            return temp[4];
                        }
                    }
                } else {
                    for (int i=0; i <oppmoves; i++){
                        if(temp[2] == pos[0] && pos[1] == temp[3] ){
                        
                            return temp[4];
                        }
                    }
                }
                 
           
               if(player.charAt(0) == 'r'){
          
         for(int i=0;i<mymoves;i++){
                    int sum=moves[i][0]*newboard.length + moves[i][1];
                   // System.out.println("MOVES in for " + moves[i][0] + moves[i][1] + moves[i][2] + moves[i][3]  + " vis" + vis[sum]);
                    if(vis[sum]==0){ 
                        
                         int aux[] = new int[5];
                         System.arraycopy(moves[i], 0, aux, 0, moves[i].length);
                         aux[4]=temp[4]+1;
                         que.add(aux);
                         vis[sum] =1;
                        // board[moves[i][0]]=board[moves[i][0]].substring(0,moves[i][1])+ aux[4] +board[moves[i][0]].substring(moves[i][1]+1);
                    }
                }
               }else {
                    for(int i=0;i<mymoves;i++){
                  
                    int sum = moves[i][2]*board.length + moves[i][3];
                    if(vis[sum]==0){
                        int aux[] = new int[5];
                        System.arraycopy(moves[i], 0, aux, 0, moves[i].length);
                        aux[4]=temp[4]+1;
                        que.add(aux);
                        vis[sum] =1;
                     
                    }
                } 
            }
        }
        return -1;
    }
static int evaluate(String []board, String player, int []pos){
    int score = 0,mov=0,mov_opp=0;
    String opp =new String();
    
       if(player.charAt(0) == 'r'){
        opp = "g"; } else { opp="r";}
         int mymoves = MovesSize(player,pos,board);
         int oppmoves = MovesSize(opp,pos,board);
         int moves[][] = Moves(player,pos,board);
       int opp_moves[][] = Moves(opp,pos,board);
        if(mymoves == 0 && oppmoves>0 ){
           return score = -10000;
        }else if(mymoves> 0 && oppmoves==0){
           return score = 10000;      
        } else if(mymoves == 0 && oppmoves == 0){
            return score = -5000;
        } else{
        int oks=0;
        if(player.charAt(0) == 'r'){
            for(int i=0;i<mymoves;i++)
                for(int j=0;j<oppmoves;j++)
                    if(moves[i][0] == opp_moves[j][2] && moves[i][1] == opp_moves[j][3]){
                          return score= -1000;
                    }
         
        } else {
            for(int i=0;i<mymoves;i++)
                for(int j=0;j<oppmoves;j++)
                    if(moves[i][2] == opp_moves[j][1] && moves[i][3] == opp_moves[j][1]){
                          return score= -1000;
            }
        }
       for(int i=0;i < mymoves;i++){
           
            oks=0;    
            String []newBoard1 = new String[board.length];
            System.arraycopy(board, 0, newBoard1, 0, board.length); 
            
            
            if(player.charAt(0) == 'r'){
                
                Fill(newBoard1,moves[i][0],moves[i][1],'r','-');
                int aux = spaceOcuppied(newBoard1,"r");
              
                 if(aux>mov) mov=aux;
                 
                  
                
            } else {
                Fill(newBoard1,moves[i][2],moves[i][3],'g','-');
                int aux = spaceOcuppied(newBoard1,"g");
               
                if(aux>mov) mov=aux;
                
                
            }
       }
       for(int i=0;i < oppmoves;i++){
           String []newBoard1 = new String[board.length];
            System.arraycopy(board, 0, newBoard1, 0, board.length); 
             if(player.charAt(0) == 'r'){
                Fill(newBoard1,opp_moves[i][2],opp_moves[i][3],'g','-');
                int aux = spaceOcuppied(newBoard1,"g");
               
                 if(aux>mov_opp) mov_opp=aux;
                 
                  
                
            } else {
                Fill(newBoard1,opp_moves[i][0],opp_moves[i][1],'r','-');
                int aux = spaceOcuppied(newBoard1,"r");
              
                if(aux>mov_opp) mov_opp=aux;
                
                
            }
          
        }
        
       
      
       
        if(mov<mov_opp) {score=-(mov_opp - mov);} else {score= mov-mov_opp;}
        if(distBFS(board,player,pos)!=-1) {score = score - distBFS(board,player,pos); }
       
        
       
    }
            
 
    return score;
}
static int negamax(String [] board, String  player ,int depth,int [] pos,int alpha, int beta){
    int score = 0;
    int [][] moves = Moves(player,pos,board);
    int mymoves = MovesSize(player,pos,board);
    
    String opp=new String();
    if (mymoves == 0 || depth == 0) { 
        return evaluate(board,player,pos);
    }
    
    for(int i =0; i<mymoves; i++){
        String []newBoard = new String[board.length];
         System.arraycopy(board, 0, newBoard, 0, board.length);
        if(player.charAt(0) == 'r'){
            newBoard[moves[i][0]] = newBoard[moves[i][0]].substring(0,moves[i][1])+'r'+newBoard[moves[i][0]].substring(moves[i][1] +1);
      
            score = -negamax(newBoard,"g",depth-1,moves[i],-beta,-alpha);
        } else {
            newBoard[moves[i][2]] = newBoard[moves[i][2]].substring(0,moves[i][3])+'g'+newBoard[moves[i][2]].substring(moves[i][3] +1);
          
            score = -negamax(newBoard,"r",depth-1,moves[i],-beta,-alpha);
        }
        
        if(score >= beta )
  	return score;  
        if( score > alpha )
		alpha = score;
	
    }
    return alpha;
   
    
}
static void nextMove(String [] board, int[] pos, String player){
    int score = 0;
    int [][] moves = Moves(player,pos,board);
    int mymoves = MovesSize(player,pos,board);
  
    int max = Integer.MIN_VALUE;
    int [] nextmove = new int[4];
    
    for(int i =0; i<mymoves; i++){
        String []newBoard = new String[board.length];
        System.arraycopy(board, 0, newBoard, 0, board.length);
        if(player.charAt(0) == 'r'){
            newBoard[moves[i][0]] = newBoard[moves[i][0]].substring(0,moves[i][1])+'r'+board[moves[i][0]].substring(moves[i][1] +1);
            score = -negamax(newBoard,"g",5,moves[i],Integer.MIN_VALUE,Integer.MAX_VALUE);
        } else {
            
            newBoard[moves[i][2]] = newBoard[moves[i][2]].substring(0,moves[i][3])+'g'+board[moves[i][2]].substring(moves[i][3] +1);
            score = -negamax(newBoard,"r",5,moves[i],Integer.MIN_VALUE,Integer.MAX_VALUE);
        }
        if(score>max){
        
            max = score;
            nextmove = moves[i];}
    
    }
    int ok = 0;
    if(player.charAt(0) == 'r'){
        if(nextmove[0] - pos[0] == 1){ System.out.println("DOWN"); ok=1;}
        if(nextmove[0] - pos[0] == -1 && ok==0){ System.out.println("UP"); ok=1;}
        if(nextmove[1] - pos[1] == 1 && ok==0){ System.out.println("RIGHT"); ok=1;}
        if(nextmove[1] - pos[1] == -1 && ok==0){ System.out.println("LEFT"); ok=1;}
    } else {
        if(nextmove[2] - pos[2] == 1) {System.out.println("DOWN"); ok=1;}
        if(nextmove[2] - pos[2] == -1 && ok==0) {System.out.println("UP"); ok=1;}
        if(nextmove[3] - pos[3] == 1 && ok==0){ System.out.println("RIGHT"); ok=1;}
        if(nextmove[3] - pos[3] == -1 && ok==0){ System.out.println("LEFT"); ok=1;}
    }
  
    
}
/* Tail starts here */
public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        in.useDelimiter("\n");
        String player = in.next();
        String pos = in.next();
        String[] str_pos = pos.split(" ");
        int[] position = new int[4];
        int[] sizes = new int[2];

        for(int i=0;i<4;i++) {
            position[i] = Integer.parseInt(str_pos[i]);
        }
        pos = in.next();
        str_pos = pos.split(" ");
        for(int i=0;i<2;i++) {
            sizes[i] = Integer.parseInt(str_pos[i]);
        }

        String board[] = new String[sizes[ 0 ]];

        for(int i = 0; i < sizes[ 0 ]; i++) {
            board[i] = in.next();
        }

    nextMove(board,position,player);
    }
}
